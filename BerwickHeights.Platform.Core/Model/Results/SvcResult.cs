/*
 * Copyright 2012 Berwick Heights Software, Inc
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
 * compliance with the License. You may obtain a copy of the License at 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is 
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and limitations under the License.
 *  
 */

using System;
using System.Collections.Generic;
using System.Linq;
using BerwickHeights.Platform.Core.Utils;

namespace BerwickHeights.Platform.Core.Model.Results
{
    /// <summary>
    /// Model type that holds results from a call to a service.
    /// </summary>
    public class SvcResult : ISvcResult
    {
        #region Constructors

        /// <summary>
        /// Empty constructor needed by XmlSerializer, etc.
        /// </summary>
        public SvcResult()
        {
        }

        /// <summary>
        /// Constructor used when an exception occurred during the service call.
        /// </summary>
        /// <param name="e">Exception that occurred during call.</param>
        public SvcResult(Exception e)
        {
            AddException(e);
        }

        /// <summary>
        /// Cloning constructor
        /// </summary>
        public SvcResult(ISvcResult result)
        {
            Messages = result.Messages;
            Exceptions = result.Exceptions;
            ExceptionMessages = result.ExceptionMessages;
        }
        
        #endregion

        #region ISvcResult Implementation
        
        /// <inheritdoc />
        public virtual bool IsSuccess
        {
            get
            {
                return (!Exceptions.Any()) 
                    && (Messages.FirstOrDefault(e => e.MessageType == SvcResultMessageTypes.Error) == null);
            }
        }

        /// <inheritdoc />
        public virtual IEnumerable<SvcResultMessage> Messages
        {
            get { return messages ?? (messages = new List<SvcResultMessage>()); }
            private set { messages = value.ToList(); }
        }
        private IList<SvcResultMessage> messages;

        /// <inheritdoc />
        public virtual IEnumerable<Exception> Exceptions
        {
            get { return exceptions ?? (exceptions = new List<Exception>()); }
            private set { exceptions = value.ToList(); }
        }
        private IList<Exception> exceptions;

        /// <inheritdoc />
        public virtual IEnumerable<string> ExceptionMessages
        {
            get { return exceptionsMessages ?? (exceptionsMessages = new List<string>()); }
            private set { exceptionsMessages = value.ToList(); }
        }
        private IList<string> exceptionsMessages;

        /// <inheritdoc />
        public virtual bool HasExceptions { get { return ExceptionMessages != null && ExceptionMessages.Any(); } }
        
        #endregion

        #region Methods used by service to modify this result object

        /// <summary>
        /// Adds the given message to the results generated by the service call.
        /// </summary>
        /// <param name="svcResultMessage">Message to add to results.</param>
        public virtual void AddMessage(SvcResultMessage svcResultMessage)
        {
            ((IList<SvcResultMessage>)Messages).Add(svcResultMessage);
        }

        /// <summary>
        /// Adds given exception to the results generated by the service call.
        /// </summary>
        /// <param name="ex">The exception to be added.</param>
        public virtual void AddException(Exception ex)
        {
            ((IList<Exception>)Exceptions).Add(ex);
            ((IList<string>)ExceptionMessages).Add(ex.ToString());
        }

        #endregion

        #region override Methods
        
        /// <inheritDoc/>
        public override string ToString()
        {
            return "SvcResult: "
                + "IsSuccess: " + IsSuccess
                + ", Messages: " + ListUtils.ListToString(Messages)
                + ", ExceptionMessages: " + ListUtils.ListToString(ExceptionMessages)
                + ", HasExceptions: " + HasExceptions;
        }
        
        #endregion
    }

    /// <summary>
    /// Model type that holds results from a call to a service that returns an entity.
    /// </summary>
    public class SvcResult<T> : SvcResult, ISvcResult<T>
    {
        /// <summary>
        /// Empty constructor needed by XmlSerializer, etc.
        /// </summary>
        public SvcResult()
        {
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public SvcResult(T entity)
        {
            Entity = entity;
        }

        /// <summary>
        /// Constructor used when an exception occurred during the service call.
        /// </summary>
        /// <param name="e">Exception that occurred during call.</param>
        public SvcResult(Exception e) : base(e)
        {
        }

        /// <summary>
        /// Cloning constructor
        /// </summary>
        public SvcResult(ISvcResult<T> result) : base(result)
        {
            Entity = result.Entity;
        }

        /// <inheritdoc />
        public virtual T Entity { get; set; }

        /// <inheritDoc/>
        public override string ToString()
        {
            return base.ToString() + ", Entity: " + Entity;
        }
    }
}
