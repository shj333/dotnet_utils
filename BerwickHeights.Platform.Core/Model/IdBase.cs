/*
 * Copyright 2012 Berwick Heights Software, Inc
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
 * compliance with the License. You may obtain a copy of the License at 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is 
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and limitations under the License.
 *  
 */

using System;

namespace BerwickHeights.Platform.Core.Model
{
    /// <summary>
    /// Abstract base class for domain models that have a system id, domain id and external id.
    /// </summary>
    public abstract class IdBase : AuditInfoBase
    {
        #region Constructors

        /// <summary>
        /// Empty constructor for NHibernate, etc.
        /// </summary>
        protected IdBase()
        {
        }

        /// <summary>
        /// Constructor 
        /// </summary>
        protected IdBase(string domainId, string externalId)
            : this(null, domainId, externalId)
        {
        }

        /// <summary>
        /// Constructor 
        /// </summary>
        protected IdBase(string systemId, string domainId, string externalId)
        {
            SystemId = systemId;
            DomainId = domainId;
            ExternalId = externalId;
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// Internal system id for this domain object.
        /// </summary>
        public virtual string SystemId { get; protected internal set; }

        /// <summary>
        /// Domain id (human readable) for this domain object.
        /// </summary>
        public virtual string DomainId { get; protected internal set; }

        /// <summary>
        /// An id for this domain object generated by an external system.
        /// </summary>
        public virtual string ExternalId { get; protected internal set; }

        #endregion

        #region Overrides

        /// <inheritDoc/>
        public override string ToString()
        {
            return string.Format("SystemId: {0}, DomainId: {1}, ExternalId: {2}, {3}", SystemId, DomainId, ExternalId, base.ToString());
        }

        /// <inheritDoc/>
        public virtual bool Equals(IdBase other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return base.Equals(other) && Equals(other.DomainId, DomainId) && Equals(other.ExternalId, ExternalId);
        }

        /// <inheritDoc/>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return Equals(obj as IdBase);
        }

        /// <inheritDoc/>
        public override int GetHashCode()
        {
            unchecked
            {
                int result = base.GetHashCode();
                result = (result * 397) ^ (DomainId != null ? DomainId.GetHashCode() : 0);
                result = (result * 397) ^ (ExternalId != null ? ExternalId.GetHashCode() : 0);
                return result;
            }
        }

        #endregion
    }
}
