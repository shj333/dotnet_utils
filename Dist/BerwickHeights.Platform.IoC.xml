<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BerwickHeights.Platform.IoC</name>
    </assembly>
    <members>
        <member name="T:BerwickHeights.Platform.IoC.IoCContainerManagerFactory">
            <summary>
            Static class factory to get singleton instance of the IoC container manager.
            </summary>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IoCContainerManagerFactory.GetIoCContainerManager">
            <summary>
            Returns the singleton instance of the IoC container manager configured in application configuration 
            according to the key "IoCContainerType". The configured value should be the fully qualified type name 
            of the IoC container manager (full type name and assembly).
            </summary>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IoCContainerManagerFactory.GetIoCContainerManager(System.String)">
            <summary>
            Returns the singleton instance of the IoC container manager specified by containerType. If containerType
            is empty, then uses the container manager configured in application configuration according to the key 
            "IoCContainerType". The configured value should be the fully qualified type name of the IoC container 
            manager (full type name and assembly).
            </summary>
            <param name="containerType">The fully qualified type name of the IoC container manager (full type name 
            and assembly).</param>
        </member>
        <member name="T:BerwickHeights.Platform.IoC.IoCContainerManagerBase">
            <summary>
            Abstract base class for IoC container managers.
            </summary>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IoCContainerManagerBase.ConfigureNHibernate(FluentNHibernate.Cfg.Db.IPersistenceConfigurer,FluentNHibernate.Automapping.AutoPersistenceModel,System.Action{NHibernate.Cfg.Configuration},BerwickHeights.Platform.Core.Logging.ILogger)">
            <summary>
            Sets up configuration of NHibernate (database configuration via ConfigureDatabase(), mappings via 
            ConfigureMappings()) and exposes the configuration via supplied exposeConfigAction.
            </summary>
            <param name="persistenceConfigurer">Sets up FluentNHibernate configuration of database type, 
            connection string, etc.</param>
            <param name="autoPersistenceModel">Automappings used by FluentNHibernate.</param>
            <param name="exposeConfigAction">The action run when exposing the configuration (e.g., apply latest 
            schema to database instance, update schema, etc.).</param>
            <param name="logger">Logger instance in case something goes wrong.</param>
        </member>
        <member name="T:BerwickHeights.Platform.IoC.IIoCContainerManager">
            <summary>
            Interface to a type that manages an IoC container.
            </summary>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.RegisterInterceptors(BerwickHeights.Platform.Core.IoC.InterceptorDescriptor[])">
            <summary>
            Registers the given interceptors with the IoC container.
            </summary>
            <param name="descriptors">A list of descriptors for each interceptor.</param>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.RegisterLoggerFactory(BerwickHeights.Platform.Core.Logging.ILoggerFactory)">
            <summary>
            Registers the given logger factory instance.
            </summary>
            <param name="loggerFactory">The instance of the logger factory to register.</param>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.RegisterComponentsFromAppConfig">
            <summary>
            Registers any components listed in the application configuration file.
            </summary>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.RegisterComponentsFromExternalFile(System.String)">
            <summary>
            Registers any components listed in an external configuration file.
            </summary>
            <param name="configFile">The name of the external config file.</param>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.RegisterInProcComponents(System.String[])">
            <summary>
            Registers components that are called in-process by looking for any types in the given assemblies that 
            implement an interface that inherits from IIocComponent.
            </summary>
            <param name="assemblyNames">The list of assemblies to check for types that implement an interface that
            inherits from IIocComponent.</param>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.RegisterWCFClientComponents(System.String,System.String[])">
            <summary>
            Registers components that are proxied to a remote component by looking for any types in the given 
            assemblies that implement an interface that inherits from IIocComponent.
            </summary>
            <param name="wcfServiceUrl">The URL to the remote service that is hosting the remote component.</param>
            <param name="assemblyNames">The list of assemblies to check for types that implement an interface that
            inherits from IIocComponent.</param>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.RegisterWCFServiceComponents(System.String,System.String[])">
            <summary>
            Registers components that service remote requests by looking for any types in the given assemblies that 
            implement an interface that inherits from IIocComponent.
            </summary>
            <param name="wcfServiceUrl">The URL of the service that is hosting the component.</param>
            <param name="assemblyNames">The list of assemblies to check for types that implement an interface that
            inherits from IIocComponent.</param>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.RegisterComponent(System.Type,System.Type)">
            <summary>
            Registers the given implementation type as a singleton component in the IoC container with the given
            service (interface) type.
            </summary>
            <param name="serviceType">The type (interface) of the component service.</param>
            <param name="implType">The implementation type for the component.</param>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.RegisterComponentInstance(System.Type,System.Object,System.String)">
            <summary>
            Registers the given instance as a component in the IoC container. The service type and component id are 
            set as given.
            </summary>
            <param name="serviceType">The type (interface) of the component service.</param>
            <param name="instance">The instance to register as a component.</param>
            <param name="componentId">The id of the component.</param>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.SetupNHibernateIntegration(FluentNHibernate.Cfg.Db.IPersistenceConfigurer,FluentNHibernate.Automapping.AutoPersistenceModel,System.Action{NHibernate.Cfg.Configuration},System.Boolean,System.Boolean)">
            <summary>
            NHibernate integration.
            </summary>
            <param name="persistenceConfigurer">Sets up FluentNHibernate configuration of database type, 
            connection string, etc.</param>
            <param name="autoPersistenceModel">Automappings used by FluentNHibernate.</param>
            <param name="exposeConfigAction">The action run when exposing the configuration (e.g., apply latest 
            schema to database instance, update schema, etc.).</param>
            <param name="isPerWebRequest">Determines lifestyle of NHibernate ISession component; if true, then 
            the lifestyle is bound to the web request; otherwise, the lifestyle is transient and the instances
            are destroyed when disposed.</param>
            <param name="isUseAutoTransactions">If true, then automated database transactions via AOP are 
            configured.</param>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.SetupASPNetMVCIntegration">
            <summary>
            Sets up integration between the IoC container and ASP.Net MVC so that controllers are generated by
            the IoC container instead of ASP.NEt MVC framework.
            </summary>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.Resolve``1">
            <summary>
            Returns a component that implements the given interface.
            </summary>
            <typeparam name="T">The requested component interface.</typeparam>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.TryResolve``1">
            <summary>
            Attempts to return a component that implements the given interface; if not found in IoC container, then
            returns default(T).
            </summary>
            <typeparam name="T">The requested component interface.</typeparam>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.Resolve``1(System.String)">
            <summary>
            Returns a component that implements the given interface and has the given component id.
            </summary>
            <typeparam name="T">The requested component interface.</typeparam>
            <param name="componentId">The id of the requested component.</param>
        </member>
        <member name="M:BerwickHeights.Platform.IoC.IIoCContainerManager.ResolveAll``1">
            <summary>
            Returns all components that implement the given interface.
            </summary>
            <typeparam name="T">The requested component interface.</typeparam>
        </member>
    </members>
</doc>
